{"version":3,"file":"backbone2.js","sources":["src/events.js","src/view.js","src/model.js","src/collection.js","src/index.js"],"sourcesContent":["// A module that can be mixed in to *any object* in order to provide it with\n// a custom event channel. You may bind a callback to an event with `on` or\n// remove with `off`; `trigger`-ing an event fires all callbacks in\n// succession.\n//\n//     var object = {};\n//     _.extend(object, Backbone.Events);\n//     object.on('expand', function(){ alert('expanded'); });\n//     object.trigger('expand');\n\n// Regular expression used to split event strings.\nconst eventSplitter = /\\s+/;\n\n// A private global variable to share between listeners and listenees.\nlet _listening;\n\n// Iterates over the standard `event, callback` (as well as the fancy multiple\n// space-separated events `\"change blur\", callback` and jQuery-style event\n// maps `{event: callback}`).\nfunction eventsApi(iteratee, events, name, callback, opts) {\n  var i = 0, names;\n  if (name && typeof name === 'object') {\n    // Handle event maps.\n    if (callback !== void 0 && 'context' in opts && opts.context === void 0) opts.context = callback;\n    for (names = _.keys(name); i < names.length ; i++) {\n      events = eventsApi(iteratee, events, names[i], name[names[i]], opts);\n    }\n  } else if (name && eventSplitter.test(name)) {\n    // Handle space-separated event names by delegating them individually.\n    for (names = name.split(eventSplitter); i < names.length; i++) {\n      events = iteratee(events, names[i], callback, opts);\n    }\n  } else {\n    // Finally, standard events.\n    events = iteratee(events, name, callback, opts);\n  }\n  return events;\n};\n\nconst Events = {\n\n}\n\nexport default Events;\n","const View = {\n\n};\n\nexport default View;\n","const Model = {\n\n};\n\nexport default Model;\n","const Collection = {};\n\nexport default Collection;\n","import Events from './events';\nimport View from './view';\nimport Model from './model';\nimport Collection from './collection';\n\nvar previousBackbone = root.Backbone;\n\n\nconst Backbone = {\n    VERSION: '1.3.3',\n\n    // $: $,\n    // _: _\n\n    noConflict() {\n      root.Backbone = previousBackbone;\n      return this;\n    },\n\n    emulateHTTP: false,\n    emulateJSON: false,\n\n    Events,\n    View,\n    Model,\n    Collection,\n}\n\nexport default Backbone;\n"],"names":[],"mappings":";;;AAAA;;;;;;;;;;;AAWA,AA0BE;;AAEF,MAAM,MAAM,GAAG;;CAEd;;ACzCD,MAAM,IAAI,GAAG;;CAEZ;;ACFD,MAAM,KAAK,GAAG;;CAEb;;ACFD,MAAM,UAAU,GAAG,EAAE;;ACKrB,IAAI,gBAAgB,GAAG,IAAI,CAAC,QAAQ,CAAC;;;AAGrC,MAAM,QAAQ,GAAG;IACb,OAAO,EAAE,OAAO;;;;;IAKhB,UAAU,GAAG;MACX,IAAI,CAAC,QAAQ,GAAG,gBAAgB,CAAC;MACjC,OAAO,IAAI,CAAC;KACb;;IAED,WAAW,EAAE,KAAK;IAClB,WAAW,EAAE,KAAK;;IAElB,MAAM;IACN,IAAI;IACJ,KAAK;IACL,UAAU;CACb;;;;;;;;"}